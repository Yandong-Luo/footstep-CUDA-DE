# import numpy as np

# np.set_printoptions(threshold=np.inf, precision=6, suppress=True)

# # 定义矩阵 D (50x1)
# D = np.array([0.518370, 0.585255, 3.901861, 5.020326, 0.845929, 0.967649, 1.156522, 
#              4.637585, 5.882935, 0.874081, 1.375974, 1.688110, 3.280005, 4.520342, 
#              0.886917, 1.594215, 2.038698, 1.036706, 2.486008, 0.907142, 1.591695, 
#              2.200290, -0.964606, 0.884318, 0.944536, 1.438071, 2.250700, -1.878772, 
#              0.318334, 1.002233, 1.264941, 2.300803, -1.345858, 0.837540, 1.068120, 
#              1.207192, 2.436567, 0.306157, 1.885578, 1.110797, 1.324073, 2.655854, 
#              1.858718, 2.247999, 1.108310, 1.500000, 2.800000, 1.000000, 0.000000, 
#              1.078987]).reshape(50, 1)

# # 定义矩阵 E (50x5)
# E = np.zeros((50, 5))
# E_data = [
#     [1.000000, 0.000000, 0.513166, 0.000000, 0.000000],
#     [0.000000, 1.000000, 0.000000, 0.513166, 0.000000],
#     [0.000000, 0.000000, 1.892976, 0.000000, 0.000000],
#     [0.000000, 0.000000, 0.000000, 1.892976, 0.000000],
#     [0.000000, 0.000000, 0.000000, 0.000000, 1.000000],
#     [1.000000, 0.000000, 1.484576, 0.000000, 0.000000],
#     [0.000000, 1.000000, 0.000000, 1.484576, 0.000000],
#     [0.000000, 0.000000, 3.583357, 0.000000, 0.000000],
#     [0.000000, 0.000000, 0.000000, 3.583357, 0.000000],
#     [0.000000, 0.000000, 0.000000, 0.000000, 1.000000],
#     [1.000000, 0.000000, 3.323433, 0.000000, 0.000000],
#     [0.000000, 1.000000, 0.000000, 3.323433, 0.000000],
#     [0.000000, 0.000000, 6.783209, 0.000000, 0.000000],
#     [0.000000, 0.000000, 0.000000, 6.783209, 0.000000],
#     [0.000000, 0.000000, 0.000000, 0.000000, 1.000000],
#     [1.000000, 0.000000, 6.804344, 0.000000, 0.000000],
#     [0.000000, 1.000000, 0.000000, 6.804344, 0.000000],
#     [0.000000, 0.000000, 12.840450, 0.000000, 0.000000],
#     [0.000000, 0.000000, 0.000000, 12.840450, 0.000000],
#     [0.000000, 0.000000, 0.000000, 0.000000, 1.000000],
#     [1.000000, 0.000000, 13.393624, 0.000000, 0.000000],
#     [0.000000, 1.000000, 0.000000, 13.393624, 0.000000],
#     [0.000000, 0.000000, 24.306662, 0.000000, 0.000000],
#     [0.000000, 0.000000, 0.000000, 24.306662, 0.000000],
#     [0.000000, 0.000000, 0.000000, 0.000000, 1.000000],
#     [1.000000, 0.000000, 25.866974, 0.000000, 0.000000],
#     [0.000000, 1.000000, 0.000000, 25.866974, 0.000000],
#     [0.000000, 0.000000, 46.011921, 0.000000, 0.000000],
#     [0.000000, 0.000000, 0.000000, 46.011921, 0.000000],
#     [0.000000, 0.000000, 0.000000, 0.000000, 1.000000],
#     [1.000000, 0.000000, 49.478722, 0.000000, 0.000000],
#     [0.000000, 1.000000, 0.000000, 49.478722, 0.000000],
#     [0.000000, 0.000000, 87.099457, 0.000000, 0.000000],
#     [0.000000, 0.000000, 0.000000, 87.099457, 0.000000],
#     [0.000000, 0.000000, 0.000000, 0.000000, 1.000000],
#     [1.000000, 0.000000, 94.175186, 0.000000, 0.000000],
#     [0.000000, 1.000000, 0.000000, 94.175186, 0.000000],
#     [0.000000, 0.000000, 164.877167, 0.000000, 0.000000],
#     [0.000000, 0.000000, 0.000000, 164.877167, 0.000000],
#     [0.000000, 0.000000, 0.000000, 0.000000, 1.000000],
#     [1.000000, 0.000000, 178.784515, 0.000000, 0.000000],
#     [0.000000, 1.000000, 0.000000, 178.784515, 0.000000],
#     [0.000000, 0.000000, 312.108490, 0.000000, 0.000000],
#     [0.000000, 0.000000, 0.000000, 312.108490, 0.000000],
#     [0.000000, 0.000000, 0.000000, 0.000000, 1.000000],
#     [1.000000, 0.000000, 338.947937, 0.000000, 0.000000],
#     [0.000000, 1.000000, 0.000000, 338.947937, 0.000000],
#     [0.000000, 0.000000, 590.813843, 0.000000, 0.000000],
#     [0.000000, 0.000000, 0.000000, 590.813843, 0.000000],
#     [0.000000, 0.000000, 0.000000, 0.000000, 1.000000]
# ]

# for i in range(50):
#     E[i] = E_data[i]

# # Define x_0 (make sure it's shaped correctly)
# x_0 = np.array([0.29357406, 0.29125562, -0.01193462, -0.01774755, 1.58432257]).reshape(5, 1)

# # Calculate E@x_0
# E_x_0 = E @ x_0  # This should be 50x1

# # Print shapes to verify
# print("D shape:", D.shape)
# print("E shape:", E.shape)
# print("x_0 shape:", x_0.shape)
# print("E@x_0 shape:", E_x_0.shape)

# # Calculate D - E@x_0
# result = D - E_x_0  # This should be 50x1

# print("Result shape:", result.shape)
# print("\nD - E@x_0 result:")
# print(result)

# # # Print row by row
# # print("\nRow-by-row results:")
# # for i in range(50):
# #     print(f"[{i}]: {result[i, 0]:.8f}")


import numpy as np
import numpy as np

# 读取文件
file_path = "./tmp.txt"  # 请替换为你的文件路径
with open(file_path, "r") as f:
    data = [list(map(float, line.split())) for line in f]

# 转换为 NumPy 矩阵
bigF = np.array(data)

# 打印或使用矩阵
print(bigF)


# # Define matrix bigF
# bigF = np.array([
#     [-0.892976, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
#     [0.000000, -0.892976, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
#     [-5.034157, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
#     [0.000000, -5.034157, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
#     [0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
#     [-3.476333, 0.000000, 0.000000, -0.892976, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
#     [0.000000, -3.476333, 0.000000, 0.000000, -0.892976, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
#     [-9.529538, 0.000000, 0.000000, -5.034157, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
#     [0.000000, -9.529538, 0.000000, 0.000000, -5.034157, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
#     [0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
#     [-8.366567, 0.000000, 0.000000, -3.476333, 0.000000, 0.000000, -0.892976, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
#     [0.000000, -8.366567, 0.000000, 0.000000, -3.476333, 0.000000, 0.000000, -0.892976, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
#     [-18.039185, 0.000000, 0.000000, -9.529538, 0.000000, 0.000000, -5.034157, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
#     [0.000000, -18.039185, 0.000000, 0.000000, -9.529538, 0.000000, 0.000000, -5.034157, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
#     [0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
#     [-17.623661, 0.000000, 0.000000, -8.366567, 0.000000, 0.000000, -3.476333, 0.000000, 0.000000, -0.892976, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
#     [0.000000, -17.623661, 0.000000, 0.000000, -8.366567, 0.000000, 0.000000, -3.476333, 0.000000, 0.000000, -0.892976, 0.000000, 0.000000, 0.000000, 0.000000],
#     [-34.147739, 0.000000, 0.000000, -18.039185, 0.000000, 0.000000, -9.529538, 0.000000, 0.000000, -5.034157, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
#     [0.000000, -34.147739, 0.000000, 0.000000, -18.039185, 0.000000, 0.000000, -9.529538, 0.000000, 0.000000, -5.034157, 0.000000, 0.000000, 0.000000, 0.000000],
#     [0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000],
#     [-35.147114, 0.000000, 0.000000, -17.623661, 0.000000, 0.000000, -8.366567, 0.000000, 0.000000, -3.476333, 0.000000, 0.000000, -0.892976, 0.000000, 0.000000],
#     [0.000000, -35.147114, 0.000000, 0.000000, -17.623661, 0.000000, 0.000000, -8.366567, 0.000000, 0.000000, -3.476333, 0.000000, 0.000000, -0.892976, 0.000000],
#     [-64.640846, 0.000000, 0.000000, -34.147739, 0.000000, 0.000000, -18.039185, 0.000000, 0.000000, -9.529538, 0.000000, 0.000000, -5.034157, 0.000000, 0.000000],
#     [0.000000, -64.640846, 0.000000, 0.000000, -34.147739, 0.000000, 0.000000, -18.039185, 0.000000, 0.000000, -9.529538, 0.000000, 0.000000, -5.034157, 0.000000],
#     [0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 1.000000]
# ])

# Reshape into a 25x15 matrix (25 rows, 15 columns)
# bigF = np.array(bigF_flat).reshape(25, 15)

# print(np.dot(bigF.T, bigF))

# # Define vector D
# D = np.array([0.287450, 0.282148, -0.022592, -0.033596, 1.584323,
#               0.275856, 0.264908, -0.042766, -0.063596, 1.584323,
#               0.253910, 0.232273, -0.080955, -0.120385, 1.584323,
#               0.212367, 0.170495, -0.153246, -0.227887, 1.584323,
#               0.133726, 0.053552, -0.290091, -0.431384, 1.584323,
#               -0.015138, -0.167820, -0.549135, -0.816599, 1.584323,
#               -0.296936, -0.586870, -1.039499, -1.545802, 1.584323,
#               -0.830371, -1.380123, -1.967746, -2.926166, 1.584323,
#               -1.840151, -2.881731, -3.724896, -5.539161, 1.584323,
#               -3.751641, -5.724240, -7.051139, -10.485497, 1.584323,
#               -7.370045, -11.105039, -13.347636, -19.848795, 1.584323,
#               -14.219594, -21.290760, -25.266750, -37.573288, 1.584323,
#               -27.185627, -40.572086, -47.829350, -71.125320, 1.584323,
#               -51.730019, -77.071182, -90.539803, -134.638519, 1.584323,
#               -98.191956, -146.163055, -171.389648, -254.867462, 1.584323,
#               -186.143250, -276.952332, -324.436462, -482.457947, 1.584323,
#               -352.632965, -524.533264, -614.150391, -913.281189, 1.584323,
#               -667.793945, -993.197998, -1162.571777, -1728.819092, 1.584323,
#               -1264.386108, -1880.368896, -2200.720215, -3272.612793, 1.584323,
#               -2393.720459, -3559.761719, -4165.910156, -6194.976562, 1.584323,
#               -4531.522949, -6738.812500, -7885.967285, -11726.941406, 1.584323,
#               -8578.332031, -12756.678711, -14927.945312, -22198.816406, 1.584323,
#               -16238.842773, -24148.351562, -28258.238281, -42021.820312, 1.584323,
#               -30740.007812, -45712.511719, -53492.160156, -79546.289062, 1.584323,
#               -58190.355469, -86532.953125, -101259.367188, -150579.203125, 1.584323,
#               -110153.195312, -163805.046875, -191681.531250, -285042.781250, 1.584323,
#               -208517.625000, -310079.281250, -362848.500000, -539579.125000, 1.584323,
#               -394719.093750, -586972.812500, -686863.437500, -1021410.125000, 1.584323,
#               -747193.875000, -1111125.625000, -1300215.875000, -1933504.750000, 1.584323,
#               -1414420.250000, -2103334.250000, -2461277.250000, -3660077.750000, 1.584323])

D = np.array([0.014739, -0.011488, 0.548302, -1.150766, -0.816258, 0.052462, -0.050327, 1.078915, -2.082006, -1.395999,
    0.116880, -0.102309, 1.584960, -2.775650, -1.792570, 0.215608, -0.146611, 2.070279, -3.205218, -2.049374,
    0.364153, -0.150093, 2.556025, -3.325722, -2.201310, 0.593389, -0.056436, 3.093299, -3.054582, -2.276085,
    0.963596, 0.234517, 3.787246, -2.235488, -2.295420, 1.590957, 0.905951, 4.842826, -0.570037, -2.276134,
    2.697642, 2.298339, 6.651647, 2.511685, -2.231119, 4.706531, 5.050118, 9.956481, 8.096054, -2.170195,
    8.420461, 10.364042, 16.162886, 18.249598, -2.100856, 15.361470, 20.511497, 27.929234, 36.896725, -2.028889,
    28.412928, 39.787209, 50.283833, 71.481224, -1.958895, 53.035011, 76.316589, 92.739731, 136.111450, -1.894679,
    99.565506, 145.477005, 173.298203, 257.514038, -1.839533, 187.575180, 276.374451, 326.027435, 486.304199, -1.796405,
    354.112427, 524.103577, 615.408813, 918.319763, -1.767948, 669.309753, 992.955566, 1163.494385, 1735.006836, -1.756455,
    1265.927124, 1880.350830, 2201.315918, 3279.867920, -1.763683, 2395.276123, 3560.001709, 4166.199707, 6203.176270, -1.790558,
    4533.083496, 6739.339355, 7885.983887, 11735.918945, -1.836764, 8579.889648, 12757.514648, 14927.734375, 22208.359375, -1.900223,
    16240.389648, 24149.511719, 28257.855469, 42031.664062, -1.976449, 30741.541016, 45714.000000, 53491.671875, 79556.125000, -2.057802,
    58191.871094, 86534.765625, 101258.851562, 150588.656250, -2.132610, 110154.695312, 163807.156250, 191681.078125, 285051.437500, -2.184191,
    208519.109375, 310081.656250, 362848.187500, 539586.500000, -2.189749, 394720.562500, 586975.437500, 686863.375000, 1021415.687500, -2.119160,
    747195.375000, 1111128.375000, 1300216.125000, 1933507.875000, -1.933646, 1414421.750000, 2103337.000000, 2461278.000000, 3660077.750000, -1.584323])


# Solve the linear system bigF*u=D using least squares (in case the system is overdetermined)
u, residuals, rank, s = np.linalg.lstsq(bigF, D, rcond=None)

print("Solution for u:")
for i, val in enumerate(u):
    print(f"u[{i}] = {val}")

# Check the solution by computing bigF*u and comparing with D
result = np.dot(bigF, u)
print("\nVerification - bigF*u:")
for i, (computed, original) in enumerate(zip(result, D)):
    print(f"Row {i}: Computed: {computed:.6f}, Original D: {original:.6f}, Diff: {abs(computed-original):.6f}")

print("\nNorm of difference (should be close to zero):", np.linalg.norm(result - D))